module Common

exports

  sorts
    Id IdStar Int STRING CHAR BACKSLASH String Node Sort Constructor ConstructorId
    ReservedName SectionName ModuleName Section Eof
    Ws ShortCom LongCom CommChar

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9\'\-\_]*     -> Id
    [a-zA-Z][a-zA-Z0-9\'\-\_]* "*" -> IdStar
    "-"? [0-9]+                    -> Int
    "\"" StringChar* "\""          -> STRING
    ~[\"\n]                        -> StringChar
    "\\\""                         -> StringChar
    BACKSLASH                      -> StringChar
    "\\"                           -> BACKSLASH
    
    ~[\n\r]*                       -> SectionName

    [\t\ \n\r]               -> Ws
    "//" ~[\n]* ([\n] | Eof) -> ShortCom
    "/*" CommChar* "*/"      -> LongCom
    ~[\*]                    -> CommChar
    Asterisk                 -> CommChar
    "*"                      -> Asterisk
    Ws                       -> LAYOUT
    ShortCom                 -> LAYOUT
    LongCom                  -> LAYOUT
                             -> Eof
  
  lexical restrictions
  
    Int         -/- [0-9]
    Id          -/- [a-zA-Z0-9\'\-\_]
    SectionName -/- ~[\n\r]
    Asterisk    -/- [\/]
    BACKSLASH   -/- [\"]
    Eof         -/- ~[]

  context-free restrictions

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\*]
    LAYOUT? -/- [\/].[\/]

  context-free syntax
  
    Id     -> Sort {cons("Sort")}
    Id "*" -> Sort {cons("ListSort")}
    STRING -> String {cons("String")}
    
    %% nice, but makes C-SGLR fail to parse create-builders-desciptor.str properly
    %%        -> String {recover, avoid, ast("String(\"\")")}

    Sort "." "_" -> Sort {bracket}
    
    "_" "." ConstructorId -> Constructor {cons("ConstructorOnly")}
                       Id -> ConstructorId {cons("Constructor")}
    
    Sort                   -> Node
    Constructor            -> Node
    Sort "." ConstructorId -> Node {cons("SortAndConstructor")}
    
    ReservedName -> Node       {reject}
    ReservedName -> ModuleName {reject}
