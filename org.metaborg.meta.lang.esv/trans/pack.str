module pack

imports
  
  include/EditorService
  editor-common.generated

strategies

  pack-main-descriptor-file: (_, _, esv, path, project-path) -> None()
  where
    name := <get-language-name> esv;
    filename := $[[project-path]/include/[name].packed.esv];
    rules(IncludeDirectories := [<dirname> path, project-path]);
    packed-esv := <create-packed-descriptor(<read-definitions> esv)> esv;
    <WriteToTextFile> (filename, packed-esv)

  pack-main-descriptor-file: (_, _, esv, _, _) -> None()
  where
    <not(get-language-name)> esv

  create-packed-descriptor(definitions) = Module(!$[[<id>].packed],id,definitions)

strategies
	
  get-language-name = get-language-option(?LanguageName(<id>))

  get-language-option(s): Module(_,_,[Language(_,option*)]) -> option
  where
    option := <getfirst(s)> option*
    
strategies

  read-definitions: Module(name,Imports(import*),definition*) -> [definition*,import-definition*]
  with
    	name' := <strip-annos> name;
    	rules(IsImported: name');
      new-import* := <filter(?Import(<strip-annos>);not(IsImported))> import*;
      import-definition* := <map(read-descriptor-file;read-definitions);concat> new-import*

  read-definitions: Module(name,NoImports(),definition*) -> definition*
  where
    	name' := <strip-annos> name;
    	rules(IsImported: name')

  read-descriptor-file: name -> esv
  with
    esv := <IncludeDirectories;getfirst(!$[[<id>]/[name].esv];file-exists);parse-file>