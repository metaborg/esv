module complete

imports
  libstratego-sglr
  libstratego-sdf
  lib/editor-common.generated
  include/EditorService
  analyze

strategies

  editor-complete:
    (Module(COMPLETION(_),_,_), position, ast, path, project-path) -> proposals
    where
      proposals := [<base-filename; remove-extension> path]

  editor-complete:
    (Import(COMPLETION(_)), position, ast, path, project-path) -> proposals
    where
      proposals := <all-keys-ESVFiles>
  
  editor-complete:
    (Sort(COMPLETION(_)), position, ast, path, project-path) -> proposals
    where
      proposals := <get-all-sorts>

  editor-complete:
    (PlaceholderWithSort(_,COMPLETION(_)), position, ast, path, project-path) -> proposals
    where
      proposals := <get-all-sorts>

  editor-complete:
    (SortAndConstructor(Sort(srt),Constructor(COMPLETION(""))), position, ast, path, project-path) -> ["_"|proposals]
    where
      //Sort + constructor
      proposals := <get-all-constructors(|srt)>
 
  editor-complete:
    (Constructor(COMPLETION(_)), position, ast, path, project-path) -> ["_"|proposals]
    where
      //Unknown Sort + constructor
      proposals := <get-all-constructors>
      
  editor-complete:
    (KeyCombination(COMPLETION(_)), position, ast, path, project-path) -> proposals
    where
      proposals := <
      	all-keys-KeyBindingDeclaration;
      	make-set;
      	map(pp-editorservice-string)
      >

  editor-complete:
    (AttributeRef(COMPLETION(_)), position, ast, path, project-path) -> proposals
    where
      proposals := <
      	all-keys-ColorDefDeclaration;
      	make-set;
      	map(!(<pp-editorservice-string>, <ColorDefDeclaration; pp-editorservice-string>))
      >

  editor-complete:
    (CompletionTemplateEx([Sort(sort)],_,COMPLETION(""),_), position, ast, path, project-path) -> proposals
    where
      proposals := <get-template-proposals> sort

  editor-complete:
    (CompletionTemplateEx([Sort(sort)],_,[String(COMPLETION(""))],_), position, ast, path, project-path) -> proposals
    where
      proposals := <get-template-proposals> sort
      
  get-template-proposals:
    sort -> proposals
    where
      lhs*      := <bagof-SortProductionLHS> sort;
      lhs'*     := <topdown(repeat(remove-completion-irrelevant))> lhs*;
      proposals := <make-set> <filter(to-completion-parts-top)> lhs'*



rules //helper rules
    	
  to-completion-parts-top:
    [lit(first) | tail] -> $[[trigger'] [rest']]
    where
      trigger  := [lit(first) | <take-while(?lit(<is-alpha>))> tail];
      trigger' := <to-completion-parts> trigger;
      rest     := <drop-while(?lit(<is-alpha>))> tail;
      rest'    := <to-completion-parts> <separate-by(|lit(" "))> rest

  to-completion-parts:
    [lit(x) | tail] -> ["\"", lits', "\" " | tail']
    where
      lits  := <map(?lit(<id>))> <take-while(?lit(_))>;
      lits' := <escape> <concat-strings> <separate-by(|" ")> lits;
      tail' := <to-completion-parts> <drop-while(?lit(_))> tail

  to-completion-parts:
    [sort(x) | tail] -> ["<", x, "> " | <to-completion-parts> tail]

  to-completion-parts:
    [iter-star(sort(x)) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]

  to-completion-parts:
    [iter-star-sep(sort(x), _) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]

  to-completion-parts:
    [iter(sort(x)) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]

  to-completion-parts:
    [iter-sep(sort(x), _) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]

  to-completion-parts:
    [opt(sort(x)) | tail] -> ["<", x, "> " | <to-completion-parts> tail]

  to-completion-parts:
    [] -> []

  remove-completion-irrelevant:
    parameterized-sort(x, _) -> sort(x)

  remove-completion-irrelevant:
    cf(x) -> x

  remove-completion-irrelevant:
    lex(x) -> x

  remove-completion-irrelevant:
    opt(layout()) -> lit(" ")

//TODO: complete module and import names

//TODO complete stratego calls