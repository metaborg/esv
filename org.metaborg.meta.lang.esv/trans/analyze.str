module analyze

imports
  libstratego-sglr
  libstratego-sdf
  lib/editor-common.generated
  include/EditorService

strategies //ESV

  record-all-esvs =
    <readdir> ".";
    list-loop(
      if <isdir> <filemode> then
        chdir;
        record-all-esvs;
        <chdir> ".."
      else
        try(record-esv)
      end
    );
    rules(ESVFiles : filename -> filename)
  
  record-esv:
    filename -> filename
    where
      <has-extension(|"esv")> filename;
      <open-import(
      	abspath, 
      	parse-editorservice-file, 
      	alltd(record-keybinding); alltd(record-color-def)
     )> filename

  record-keybinding =
  	?kb@KeyBinding(keyCombi, binding);
  	rules(KeyBindingDeclaration : keyCombi -> kb)

  record-color-def =
  	?cdef@ColorDef(cname, attr);
  	rules(ColorDefDeclaration : cname -> attr)


strategies //SDF 
	

  record-all-sdfs =
    <readdir> ".";
    list-loop(
      if <isdir> <filemode> then
        chdir;
        record-all-sdfs;
        <chdir> ".."
      else
        try(record-sdf)
      end
    )

  record-sdf:
    filename -> filename
    where
      <has-extension(|"sdf")> filename;
      <open-import(abspath, parse-sdf-module-file, alltd(record-prod))> filename

  record-sdf:
    filename -> filename
    where
      <has-extension(|"def")> filename;
      <open-import(abspath, parse-sdf-definition-file, alltd(record-prod))> filename

  record-prod:
    renamed-module(x, renamings(y)) -> <id>
    where
      let record-sort = \x -> x with rules(SortDeclaration : x -> x)\
      in
        <all(try(?symbol(_, sort(<id>)); record-sort))> y
      end

  record-prod:
    prod @ prod(lhs, sort, attrs) -> <id>
    where
      !sort;
      try(?cf(<id>) + ?lex(<id>));
      repeat(?label(_, <id>));
      (?sort(x) + ?parameterized-sort(x, _));
      <not(oncetd(?"recover" <+ ?"deprecated" <+ ?"completion" <+ ?"reject"))> attrs; //does not help?
      <not(?[lit(artificial)]; <string-starts-with(|"|#")> artificial)> lhs 
    with
      rules(
        SortDeclaration   :  x -> x
        SortProductionLHS :+ x -> lhs
      );
      <try(record-constructor(|x))> attrs

  record-constructor(|sort) =
 	oncetd( //"\"AddDynRule\""
		?appl(unquoted("cons"), [fun(quoted(consname))]) <+
		?cons(consname)
	); 
 	x := <try(un-double-quote)> consname;
    rules(
      SortAndConstructorDeclaration:  (sort, x){} -> (sort, x){}
    )
 	
rules

get-all-sorts =	
      all-keys-SortDeclaration

get-all-constructors =	
      all-keys-SortAndConstructorDeclaration;
      map(Snd); 
      make-set

get-all-constructors(|sort) =	
      all-keys-SortAndConstructorDeclaration;
       filter(?(sort, _); Snd); 
       make-set


strategies 
	
//Stratego TODO: record builders, refactoring and analysis rules?

//ESV todo: store module names	